apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "keycloak.fullname" . }}
  {{- with .Values.statefulsetAnnotations }}
  annotations:
    {{- range $key, $value := . }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
  {{- end }}
  labels:
    {{- include "keycloak.labels" . | nindent 4 }}
    {{- range $key, $value := .Values.statefulsetLabels }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
    {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "keycloak.selectorLabels" . | nindent 6 }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicas }}
  {{- end }}
  serviceName: {{ include "keycloak.fullname" . }}-headless
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  updateStrategy:
    type: {{ .Values.updateStrategy }}
  template:
    metadata:
      annotations:
        checksum/config-startup: {{ include (print .Template.BasePath "/configmap-startup.yaml") . | sha256sum }}
        checksum/secrets: {{ tpl (toYaml .Values.secrets) . | sha256sum }}
        {{- range $key, $value := .Values.podAnnotations }}
        {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 8 }}
        {{- end }}
      labels:
        {{- include "keycloak.selectorLabels" . | nindent 8 }}
        {{- if and .Values.postgresql.enabled (and .Values.postgresql.networkPolicy .Values.postgresql.networkPolicy.enabled) }}
        {{ include "keycloak.postgresql.fullname" . }}-client: "true"
        {{- end }}
        {{- range $key, $value := .Values.podLabels }}
        {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 8 }}
        {{- end }}
    spec:
    {{- if not .Values.skipInitContainers }}
      {{- if or .Values.postgresql.enabled .Values.extraInitContainers }}
      initContainers:
        {{- if .Values.auth.tls.enabled }}
        {{- $fullname := include "keycloak.fullname" . }}
        - name: init-certs
          image: {{ include "keycloak.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command:
          - /bin/bash
          - -ec
          - |-
            ID="${MY_POD_NAME#"{{ $fullname }}-"}"
            {{- if or .Values.auth.tls.autoGenerated .Values.auth.tls.usePem }}
            if [[ -f "${KEYCLOAK_TLS_KEYSTORE_FILE}" ]]; then
              echo "Removing old keycloak.keystore.jks file."
              rm ${KEYCLOAK_TLS_KEYSTORE_FILE}
            fi
            if [[ -f "${KEYCLOAK_TLS_TRUSTSTORE_FILE}" ]]; then
              echo "Removing old keycloak.truststore.jks file"
              rm ${KEYCLOAK_TLS_TRUSTSTORE_FILE}
            fi
            if [[ -f "/certs/keycloak-${ID}.key" ]] && [[ -f "/certs/keycloak-${ID}.crt" ]] && [[ -f "/certs/ca.crt" ]]; then
              openssl pkcs12 -export -in "/certs/keycloak-${ID}.crt" \
                  -passout pass:"${KEYCLOAK_TLS_KEYSTORE_PASSWORD}" \
                  -inkey "/certs/keycloak-${ID}.key" \
                  -out "/tmp/keystore.p12"
              keytool -importkeystore -srckeystore "/tmp/keystore.p12" \
                  -srcstoretype PKCS12 \
                  -srcstorepass "${KEYCLOAK_TLS_KEYSTORE_PASSWORD}" \
                  -deststorepass "${KEYCLOAK_TLS_KEYSTORE_PASSWORD}" \
                  -destkeystore "$KEYCLOAK_TLS_KEYSTORE_FILE"
              rm "/tmp/keystore.p12"
              keytool -import -file "/certs/ca.crt" \
                      -keystore "$KEYCLOAK_TLS_TRUSTSTORE_FILE" \
                      -storepass "${KEYCLOAK_TLS_TRUSTSTORE_PASSWORD}" \
                      -noprompt
            else
                echo "Couldn't find the expected PEM certificates! They are mandatory when encryption via TLS is enabled."
                exit 1
            fi
            {{- else if and .Values.auth.tls.truststoreFilename .Values.auth.tls.keystoreFilename }}
            if [[ -f {{ printf "/certs/%s" .Values.auth.tls.truststoreFilename | quote }} ]] && [[ -f {{ printf "/certs/%s" .Values.auth.tls.keystoreFilename | quote }} ]]; then
                cp {{ printf "/certs/%s" .Values.auth.tls.truststoreFilename | quote }} "$KEYCLOAK_TLS_TRUSTSTORE_FILE"
                cp {{ printf "/certs/%s" .Values.auth.tls.keystoreFilename | quote }} "$KEYCLOAK_TLS_KEYSTORE_FILE"
            else
                echo "Couldn't find the expected Java Key Stores (JKS) files! They are mandatory when encryption via TLS is enabled."
                exit 1
            fi
            {{- else }}
            if [[ -f "/certs/keycloak.truststore.jks" ]] && [[ -f "/certs/keycloak-${ID}.keystore.jks" ]]; then
                cp "/certs/keycloak.truststore.jks" "$KEYCLOAK_TLS_TRUSTSTORE_FILE"
                cp "/certs/keycloak-${ID}.keystore.jks" "$KEYCLOAK_TLS_KEYSTORE_FILE"
            else
                echo "Couldn't find the expected Java Key Stores (JKS) files! They are mandatory when encryption via TLS is enabled."
                exit 1
            fi
            {{- end }}
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            {{- if or .Values.auth.tls.keystorePassword .Values.auth.existingSecretPerPassword .Values.auth.tls.autoGenerated .Values.auth.existingSecret }}
            - name: KEYCLOAK_TLS_KEYSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                {{- if .Values.auth.existingSecretPerPassword }}
                  name: {{ tpl (include "common.secrets.name" (dict "existingSecret" .Values.auth.existingSecretPerPassword.tlsKeystorePassword "context" $)) $ }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.auth.existingSecretPerPassword "key" "tlsKeystorePassword") }}
                {{- else }}
                  name: {{ $globalSecretName }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.auth.existingSecret "key" "tls-keystore-password") }}
                {{- end }}
            {{- end }}
            {{- if or .Values.auth.tls.truststorePassword .Values.auth.existingSecretPerPassword .Values.auth.tls.autoGenerated .Values.auth.existingSecret }}
            - name: KEYCLOAK_TLS_TRUSTSTORE_PASSWORD
              valueFrom:
                secretKeyRef:
                {{- if .Values.auth.existingSecretPerPassword }}
                  name: {{ tpl (include "common.secrets.name" (dict "existingSecret" .Values.auth.existingSecretPerPassword.tlsTruststorePassword "context" $)) $ }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.auth.existingSecretPerPassword "key" "tlsTruststorePassword") }}
                {{- else }}
                  name: {{ $globalSecretName }}
                  key: {{ include "common.secrets.key" (dict "existingSecret" .Values.auth.existingSecret "key" "tls-truststore-password") }}
                {{- end }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-env-vars" (include "keycloak.fullname" .) }}
          {{- if .Values.auth.tls.resources }}
          resources: {{- toYaml .Values.auth.tls.resources | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: certificates
            mountPath: /certs
          - name: shared-certs
            mountPath: /opt/bitnami/keycloak/certs
        {{- end }}
        {{- if .Values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: keycloak
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            {{- toYaml .Values.command | nindent 12 }}
          args:
            {{- toYaml .Values.args | nindent 12 }}
          {{- with .Values.lifecycleHooks }}
          lifecycle:
          {{- tpl . $ | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.postgresql.enabled }}
            - name: DB_VENDOR
              value: postgres
            - name: DB_ADDR
              value: {{ include "keycloak.postgresql.fullname" . }}
            - name: DB_PORT
              value: {{ .Values.postgresql.service.port | quote }}
            - name: DB_DATABASE
              value: {{ .Values.postgresql.postgresqlDatabase | quote }}
            - name: DB_USER
              value: {{ .Values.postgresql.postgresqlUsername | quote }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "keycloak.postgresql.fullname" . }}
                  key: postgres-password
            {{- end }}
            {{- with .Values.extraEnv }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          envFrom:
            {{- with .Values.extraEnvFrom }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http-management
              containerPort: 9990
              protocol: TCP
            {{- with .Values.extraPorts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- tpl . $ | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- tpl . $ | nindent 12 }}
          {{- end }}
          {{- with .Values.startupProbe }}
          startupProbe:
            {{- tpl . $ | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- range $key, $value := .Values.startupScripts }}
            - name: startup
              mountPath: "/opt/jboss/startup-scripts/{{ $key }}"
              subPath: "{{ $key }}"
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- tpl . $ | nindent 12 }}
            {{- end }}
        {{- with .Values.extraContainers }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "keycloak.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      enableServiceLinks: {{ .Values.enableServiceLinks }}
      restartPolicy: {{ .Values.restartPolicy }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- tpl . $ | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.priorityClassName }}
      priorityClassName: {{ . }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      volumes:
        {{- with .Values.startupScripts }}
        - name: startup
          configMap:
            name: {{ include "keycloak.fullname" $ }}-startup
            defaultMode: 0555
            items:
              {{- range $key, $value := . }}
              - key: {{ $key }}
                path: {{ $key }}
              {{- end }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- tpl . $ | nindent 8 }}
        {{- end }}
